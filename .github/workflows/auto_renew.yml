# .github/workflows/auto_renew.yml
name: Auto Server Renew

on:
  # 定时运行 - 每天UTC 2点（北京时间10点）
  schedule:
    - cron: '0 2 * * *'
  
  # 手动触发
  workflow_dispatch:
    inputs:
      reason:
        description: '手动运行原因'
        required: false
        default: '手动测试'
        type: string
      use_real_mouse:
        description: '使用真实鼠标点击'
        required: false
        default: true
        type: boolean

# 环境变量
env:
  PYTHONUNBUFFERED: 1
  DISPLAY: :99

# 设置权限
permissions:
  contents: read

jobs:
  renew-server:
    name: 续期服务器
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        
      - name: 🐍 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: 📦 安装系统依赖
        run: |
          # 更新包列表
          sudo apt-get update -qq
          
          # 方法1: 使用官方推荐的新方式安装Chrome
          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -qq
          
          # 先尝试安装Chrome
          sudo apt-get install -y -qq google-chrome-stable || {
            echo "Chrome安装失败，尝试备用方案..."
            # 备用方案：直接下载Chrome deb包
            wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get install -f -y
          }
          
          # 安装基础依赖（处理Ubuntu版本差异）
          sudo apt-get install -y -qq \
            xvfb \
            fluxbox \
            x11-utils \
            fonts-liberation \
            ca-certificates \
            fonts-noto-color-emoji \
            libxss1 \
            libgbm1 \
            libdrm2 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libnss3 \
            libatk-bridge2.0-0 \
            libgtk-3-0 \
            libatspi2.0-0 || {
            # 如果部分包安装失败，尝试替代包名
            echo "尝试安装替代包名..."
            sudo apt-get install -y -qq \
              libasound2-dev \
              libasound2t64 \
              || sudo apt-get install -y -qq libasound2 || echo "音频库安装跳过"
          }
          
      - name: 🔍 检查Chrome版本
        run: |
          CHROME_VERSION=$(google-chrome --version)
          echo "Chrome版本: $CHROME_VERSION"
          
      - name: 📦 安装Python依赖
        run: |
          python -m pip install --upgrade pip
          pip install \
            selenium==4.15.0 \
            undetected-chromedriver \
            playwright==1.40.0 \
            requests \
            loguru \
            pyautogui \
            pillow \
            opencv-python \
            pynput \
            psutil
            
      - name: 🎭 安装Playwright浏览器
        run: |
          playwright install chromium
          
      - name: 🖥️ 设置虚拟显示和窗口管理器
        run: |
          # 启动Xvfb虚拟显示服务器（有头模式用）
          Xvfb :99 -screen 0 1366x768x24 -ac -nolisten tcp -dpi 96 > /dev/null 2>&1 &
          export DISPLAY=:99
          echo "DISPLAY=:99" >> $GITHUB_ENV
          
          # 等待显示服务器启动
          sleep 3
          
          # 测试显示是否工作
          xdpyinfo -display :99 | head -5 || echo "显示测试完成"
          
          echo "虚拟显示已设置完成"
          
      - name: 🚀 运行续期脚本
        env:
          EMAIL: ${{ secrets.LOGIN_EMAIL }}
          PASSWORD: ${{ secrets.LOGIN_PASSWORD }}
          LOGIN_URL: ${{ secrets.LOGIN_URL || 'https://dashboard.katabump.com/auth/login' }}
          RENEW_URL: ${{ secrets.RENEW_URL || 'https://dashboard.katabump.com/servers/edit?id=124653' }}
          USE_REAL_MOUSE: ${{ inputs.use_real_mouse || 'true' }}
        run: |
          echo "🚀 开始执行续期任务..."
          echo "🔧 配置信息:"
          echo "📧 邮箱: ${EMAIL:0:3}***"
          echo "🔗 登录URL: $LOGIN_URL"
          echo "🔗 续期URL: $RENEW_URL"
          echo "🖱️ 使用真实鼠标: $USE_REAL_MOUSE"
          echo "🖥️ 显示设置: $DISPLAY"
          echo "========================"
          
          # 确保临时目录存在
          mkdir -p /tmp/screenshots
          
          # 启动窗口管理器
          fluxbox > /dev/null 2>&1 &
          sleep 2
          
          # 根据设置选择使用哪个脚本
          if [ "$USE_REAL_MOUSE" = "true" ]; then
            echo "🖱️ 使用真实鼠标点击模式"
            if [ -f "real_mouse_main.py" ]; then
              python real_mouse_main.py
            else
              echo "⚠️ 真实鼠标脚本不存在，使用传统模式"
              python main.py
            fi
          else
            echo "🖱️ 使用传统自动化模式"
            python main.py
          fi
          
      - name: 📊 显示运行状态
        if: always()
        run: |
          echo "================================="
          echo "📋 任务执行完成"
          echo "⏰ 完成时间: $(date)"
          echo "📁 工作目录: $(pwd)"
          echo "📂 文件列表:"
          ls -la
          echo "================================="
          
          # 显示日志文件（如果存在）
          if [ -f "renew.log" ]; then
            echo "📄 执行日志:"
            cat renew.log
          fi
          
      - name: 📸 保存详细调试信息
        if: always()
        run: |
          echo "📸 收集调试信息..."
          
          # 列出所有截图文件
          echo "📂 截图文件:"
          find /tmp -name "*.png" -type f 2>/dev/null || echo "未找到截图文件"
          
          # 检查日志文件
          echo "📄 日志文件:"
          if [ -f "renew.log" ]; then
            echo "找到主日志文件: renew.log ($(wc -l < renew.log) 行)"
          fi
          
          # 检查Chrome进程
          echo "🔍 Chrome进程:"
          ps aux | grep chrome | head -5 2>/dev/null || echo "未找到Chrome进程"
          
          # 检查显示服务器
          echo "🖥️ 显示服务器状态:"
          ps aux | grep Xvfb | head -3 2>/dev/null || echo "Xvfb未运行"
          
      - name: 📸 上传截图和日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 执行结果-${{ github.run_number }}
          path: |
            /tmp/**/*.png
            /tmp/screenshots/*.png
            renew.log
            *.log
          retention-days: 7
          if-no-files-found: ignore
          
      - name: 📬 发送通知
        if: always()
        run: |
          # 这里可以添加通知逻辑
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ 续期任务执行成功！"
            # 可以在这里添加成功通知，比如：
            # curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            #   -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            #   -d "text=✅ 服务器续期成功 - $(date)"
          else
            echo "❌ 续期任务执行失败！"
            # 可以在这里添加失败通知
          fi
          
      - name: 🧹 清理临时文件
        if: always()
        run: |
          # 清理可能的临时文件
          sudo rm -rf /tmp/chrome* /tmp/.X* 2>/dev/null || true
          echo "临时文件清理完成"
